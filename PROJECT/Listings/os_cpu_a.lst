


ARM Macro Assembler    Page 1 


    1 00000000         ;/*********************** (C) COPYRIGHT 2010 Libraworks 
                       *************************
    2 00000000         ;* File Name : os_cpu_a.asm 
    3 00000000         ;* Author  : Librae 
    4 00000000         ;* Version  : V1.0
    5 00000000         ;* Date   : 06/10/2010
    6 00000000         ;* Description : ¶ÃCOS-II asm port for STM32
    7 00000000         ;*******************************************************
                       ************************/
    8 00000000         
    9 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   10 00000000                 IMPORT           OSPrioCur
   11 00000000                 IMPORT           OSPrioHighRdy
   12 00000000                 IMPORT           OSTCBCur
   13 00000000                 IMPORT           OSTCBHighRdy
   14 00000000                 IMPORT           OSIntNesting
   15 00000000                 IMPORT           OSIntExit
   16 00000000                 IMPORT           OSTaskSwHook
   17 00000000         
   18 00000000                 EXPORT           OSStartHighRdy
   19 00000000                 EXPORT           OSCtxSw
   20 00000000                 EXPORT           OSIntCtxSw
   21 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   22 00000000                 EXPORT           OS_CPU_SR_Restore
   23 00000000                 EXPORT           PendSV_Handler
   24 00000000                 EXPORT           GetZeroNum
   25 00000000                 EXPORT           GetRBIT16
   26 00000000                 EXPORT           BlxExternFun
   27 00000000         
   28 00000000         
   29 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÷–∂œøÿ÷∆ºƒ¥Ê∆˜
   30 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; œµÕ≥”≈œ»º∂ºƒ¥Ê∆˜(
                                                            2)
   31 00000000 FFFF0000 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF0000  ; PendSV÷–∂œ∫ÕœµÕ≥Ω
                                                            ⁄≈ƒ÷–∂œ
   32 00000000         ; (∂ºŒ™◊ÓµÕ£¨0xff).
   33 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ¥•∑¢»Ìº˛÷–∂œµƒ÷µ.
                                                            
   34 00000000         
   35 00000000         
   36 00000000                 PRESERVE8
   37 00000000         
   38 00000000                 AREA             |.text|, CODE, READONLY
   39 00000000                 THUMB
   40 00000000         
   41 00000000         
   42 00000000         
   43 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 2 


   44 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   45 00000000         ;
   46 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   47 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   48 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   49 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   50 00000000         ;              into the CPU's status register.
   51 00000000         ;
   52 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   53 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   54 00000000         ;
   55 00000000         ;
   56 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   57 00000000         ;
   58 00000000         ;                 void Task (void *p_arg)
   59 00000000         ;                 {
   60 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   61 00000000         ;                     OS_CPU_SR  cpu_sr;
   62 00000000         ;                 #endif
   63 00000000         ;
   64 00000000         ;                          :
   65 00000000         ;                          :
   66 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   67 00000000         ;                          :
   68 00000000         ;                          :
   69 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   70 00000000         ;                          :
   71 00000000         ;                          :
   72 00000000         ;                 }
   73 00000000         ;*******************************************************
                       *************************************************
   74 00000000         
   75 00000000         OS_CPU_SR_Save
   76 00000000 F3EF 8010       MRS              R0, PRIMASK ;∂¡»°PRIMASKµΩR0,R0
                                                            Œ™∑µªÿ÷µ 
   77 00000004 B672            CPSID            I           ;PRIMASK=1,πÿ÷–∂œ(N
                                                            MI∫Õ”≤º˛FAULTø…“‘œÏ
                                                            ”¶)
   78 00000006 4770            BX               LR          ;∑µªÿ
   79 00000008         
   80 00000008         OS_CPU_SR_Restore
   81 00000008 F380 8810       MSR              PRIMASK, R0 ;∂¡»°R0µΩPRIMASK÷–,
                                                            R0Œ™≤Œ ˝,ª÷∏¥µΩ÷Æ«∞
                                                            µƒ÷–∂œ‘ –Ì◊¥Ã¨£¨
   82 0000000C 4770            BX               LR          ;∑µªÿ
   83 0000000E         
   84 0000000E         
   85 0000000E         ;/******************************************************
                       ********************************



ARM Macro Assembler    Page 3 


   86 0000000E         ;* ∫Ø ˝√˚≥∆: OSStartHighRdy
   87 0000000E         ;*
   88 0000000E         ;* π¶ƒ‹√Ë ˆ:  π”√µ˜∂»∆˜‘À––µ⁄“ª∏ˆ»ŒŒÒ
   89 0000000E         ;* 
   90 0000000E         ;* ≤Œ     ˝: None
   91 0000000E         ;*
   92 0000000E         ;* ∑µ ªÿ ÷µ: None
   93 0000000E         ;*******************************************************
                       *******************************/  
   94 0000000E         
   95 0000000E         OSStartHighRdy
   96 0000000E 4C26            LDR              R4, =NVIC_SYSPRI2 ; set the Pen
                                                            dSV exception prior
                                                            ity
   97 00000010 4D26            LDR              R5, =NVIC_PENDSV_PRI ;’‚¿Ô…Ë÷√»
                                                            ŒŒÒ«–ªª÷–∂œ”≈œ»º∂Œ™
                                                            ◊ÓµÕ
   98 00000012 6025            STR              R5, [R4]
   99 00000014         
  100 00000014 F04F 0400       MOV              R4, #0      ; set the PSP to 0 
                                                            for initial context
                                                             switch call
  101 00000018 F384 8809       MSR              PSP, R4
  102 0000001C         
  103 0000001C 4C24            LDR              R4, =OSRunning ; OSRunning = TR
                                                            UE,”–°Æ=°ØªÒ»°±‰¡øµ
                                                            ÿ÷∑£¨√ª”–°Æ=°Ø£¨ªÒ»
                                                            °±‰¡ø÷µ£¨œ‡µ±”⁄R4=&
                                                            OSRuning
  104 0000001E F04F 0501       MOV              R5, #1      ;z‘⁄’‚¿Ô…Ë÷√»ŒŒÒµ˜∂
                                                            »ø™ º‘À––
  105 00000022 7025            STRB             R5, [R4]    ;œ‡µ±”⁄*R4=R5
  106 00000024         
  107 00000024         ;«–ªªµΩ◊Ó∏ﬂ”≈œ»º∂µƒ»ŒŒÒ
  108 00000024 4C23            LDR              R4, =NVIC_INT_CTRL ;rigger the 
                                                            PendSV exception (c
                                                            auses context switc
                                                            h)
  109 00000026 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  110 0000002A 6025            STR              R5, [R4]    ;//¥•∑¢»ŒŒÒµ˜∂»÷–∂œ
                                                            
  111 0000002C         
  112 0000002C B662            CPSIE            I           ;enable interrupts 
                                                            at processor level
  113 0000002E         OSStartHang
  114 0000002E E7FE            B                OSStartHang ;should never get h
                                                            ere£¨µ•≤Ωµ˜ ‘ª·Ω¯»Î
                                                            ’‚¿Ô
  115 00000030         
  116 00000030         ;/******************************************************
                       ********************************
  117 00000030         ;* ∫Ø ˝√˚≥∆: OSCtxSw
  118 00000030         ;*
  119 00000030         ;* π¶ƒ‹√Ë ˆ: »ŒŒÒº∂…œœ¬Œƒ«–ªª         
  120 00000030         ;*
  121 00000030         ;* ≤Œ     ˝: None
  122 00000030         ;*
  123 00000030         ;* ∑µ ªÿ ÷µ: None
  124 00000030         ;*******************************************************



ARM Macro Assembler    Page 4 


                       ********************************/
  125 00000030         
  126 00000030         OSCtxSw
  127 00000030 B430            PUSH             {R4, R5}
  128 00000032 4C20            LDR              R4, =NVIC_INT_CTRL ;¥•∑¢PendSV“
                                                            Ï≥£ (causes context
                                                             switch)
  129 00000034 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  130 00000038 6025            STR              R5, [R4]
  131 0000003A BC30            POP              {R4, R5}
  132 0000003C 4770            BX               LR
  133 0000003E         
  134 0000003E         ;/******************************************************
                       ********************************
  135 0000003E         ;* ∫Ø ˝√˚≥∆: OSIntCtxSw
  136 0000003E         ;*
  137 0000003E         ;* π¶ƒ‹√Ë ˆ: ÷–∂œº∂»ŒŒÒ«–ªª
  138 0000003E         ;*
  139 0000003E         ;* ≤Œ     ˝: None
  140 0000003E         ;*
  141 0000003E         ;* ∑µ ªÿ ÷µ: None
  142 0000003E         ;*******************************************************
                       ********************************/
  143 0000003E         
  144 0000003E         OSIntCtxSw
  145 0000003E B430            PUSH             {R4, R5}
  146 00000040 4C1C            LDR              R4, =NVIC_INT_CTRL ;¥•∑¢PendSV“
                                                            Ï≥£ (causes context
                                                             switch)
  147 00000042 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  148 00000046 6025            STR              R5, [R4]
  149 00000048 BC30            POP              {R4, R5}
  150 0000004A 4770            BX               LR
  151 0000004C BF00            NOP
  152 0000004E         
  153 0000004E         ;/******************************************************
                       ********************************
  154 0000004E         ;* ∫Ø ˝√˚≥∆: OSPendSV
  155 0000004E         ;*
  156 0000004E         ;* π¶ƒ‹√Ë ˆ: OSPendSV is used to cause a context switch.
                       
  157 0000004E         ;*
  158 0000004E         ;* ≤Œ     ˝: None
  159 0000004E         ;*
  160 0000004E         ;* ∑µ ªÿ ÷µ: None
  161 0000004E         ;*******************************************************
                       ********************************/
  162 0000004E         
  163 0000004E         PendSV_Handler                       ;»ŒŒÒ«–ªª÷–∂œ
  164 0000004E B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  165 00000050 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer »Áπ˚‘⁄”
                                                            √PSP∂—’ª,‘Úø…“‘∫ˆ¬‘
                                                            ±£¥Êºƒ¥Ê∆˜,≤ŒøºCM3»
                                                            ®Õ˛÷–µƒÀ´∂—’ª-∞◊≤À◊
                                                            ¢
  166 00000054 B128            CBZ              R0, PendSV_Handler_Nosave ; Ski



ARM Macro Assembler    Page 5 


                                                            p register save the
                                                             first time£¨»Áπ˚PS
                                                            PŒ™0£¨Ã¯◊™
  167 00000056         
  168 00000056 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  169 00000058 E880 0FF0       STM              R0, {R4-R11} ;ºı“ª∏ˆ◊÷÷Æ∫Û£¨ ÷∂
                                                            Ø±£¥ÊR4-R11£¨∆‰”‡ºƒ
                                                            ¥Ê∆˜“—◊‘∂Ø±£¥Ê
  170 0000005C         
  171 0000005C 4916            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  172 0000005E 6809            LDR              R1, [R1]    ;//±£¥Ê–¬∂—’ªµÿ÷∑£¨
                                                            »ŒŒÒ±ª«–ªª
  173 00000060 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  174 00000062         
  175 00000062         ; At this point, entire context of process has been save
                       d
  176 00000062         PendSV_Handler_Nosave
  177 00000062 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  178 00000064 4815            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  179 00000066 6800            LDR              R0, [R0]
  180 00000068 B100            CBZ              R0,PendSV_Handler_NoTaskSwHook 
                                                            ;»Áπ˚∂®“Â¡À’ªÕ≥º∆π≥
                                                            ◊”£¨Ã¯◊™
  181 0000006A 4780            BLX              R0
  182 0000006C         PendSV_Handler_NoTaskSwHook
  183 0000006C F85D EB04       POP              {R14}       ;√ª”√µΩ—Ω£¨£¨
  184 00000070         
  185 00000070 4813            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  186 00000072 4914            LDR              R1, =OSPrioHighRdy
  187 00000074 780A            LDRB             R2, [R1]
  188 00000076 7002            STRB             R2, [R0]
  189 00000078         
  190 00000078 480F            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  191 0000007A 4913            LDR              R1, =OSTCBHighRdy
  192 0000007C 680A            LDR              R2, [R1]
  193 0000007E 6002            STR              R2, [R0]
  194 00000080         
  195 00000080 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  196 00000082 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  197 00000086 3020            ADDS             R0, R0, #0x20
  198 00000088 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  199 0000008C F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack  «–ªªŒ™»ŒŒ
                                                            Òº∂



ARM Macro Assembler    Page 6 


  200 00000090 B662            CPSIE            I
  201 00000092 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  202 00000094         
  203 00000094         
  204 00000094         
  205 00000094         ;º∆À„«∞µº¡„£¨»ŒŒÒµ˜∂» ± π”√
  206 00000094         GetZeroNum                           ;º∆À„«∞µº¡„
  207 00000094 FAB0 F080       CLZ              R0, R0      ;R0 «»ŒŒÒæÕ–˜±Ì
  208 00000098 4770            BX               LR
  209 0000009A         
  210 0000009A         ;À´◊÷Ω⁄µƒ∞¥Œª∑¥◊™
  211 0000009A         GetRBIT16
  212 0000009A FA90 F0A0       RBIT             R0, R0
  213 0000009E EA4F 4010       LSR              R0, R0,#16
  214 000000A2 4770            BX               LR
  215 000000A4         
  216 000000A4         
  217 000000A4         
  218 000000A4         
  219 000000A4         ;‘À––÷∏∂®µÿ÷∑µƒ∫Ø ˝
  220 000000A4         BlxExternFun
  221 000000A4 F8DD F010       LDR              PC,[SP,#0x10]
  222 000000A8         
  223 000000A8         
  224 000000A8         
  225 000000A8         
  226 000000A8                 ALIGN
  227 000000A8         
  228 000000A8         
  229 000000A8                 END
              E000ED20 
              FFFF0000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\wk_jzq_v2_6\os_cpu_a.d -o.\objects\wk_jzq_v2_6\os_cpu_a.
o -IF:\¥®~\GitHub\WK_JZQ_V2.7\PROJECT\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_
DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include --predefine="__UVISION_
VERSION SETA 514" --predefine="STM32F10X_HD SETA 1" --list=.\listings\os_cpu_a.
lst ..\SYSTEM\CPU_PORT\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 38 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      None
Comment: .text unused
BlxExternFun 000000A4

Symbol: BlxExternFun
   Definitions
      At line 220 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 26 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: BlxExternFun used once
GetRBIT16 0000009A

Symbol: GetRBIT16
   Definitions
      At line 211 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 25 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: GetRBIT16 used once
GetZeroNum 00000094

Symbol: GetZeroNum
   Definitions
      At line 206 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 24 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: GetZeroNum used once
OSCtxSw 00000030

Symbol: OSCtxSw
   Definitions
      At line 126 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 19 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000003E

Symbol: OSIntCtxSw
   Definitions
      At line 144 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 20 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002E

Symbol: OSStartHang
   Definitions
      At line 113 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 114 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 95 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 18 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 80 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 22 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 75 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 21 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000004E

Symbol: PendSV_Handler
   Definitions
      At line 163 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 23 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: PendSV_Handler used once
PendSV_Handler_NoTaskSwHook 0000006C

Symbol: PendSV_Handler_NoTaskSwHook
   Definitions
      At line 182 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 180 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: PendSV_Handler_NoTaskSwHook used once
PendSV_Handler_Nosave 00000062

Symbol: PendSV_Handler_Nosave
   Definitions
      At line 176 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 166 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: PendSV_Handler_Nosave used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 29 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 108 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
      At line 128 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
      At line 146 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 33 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 109 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
      At line 129 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
      At line 147 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm

NVIC_PENDSV_PRI FFFF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 31 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 97 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 30 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 96 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 15 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 14 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 10 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 185 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 11 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 186 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 9 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 103 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 12 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 171 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
      At line 190 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 13 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 191 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 16 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
   Uses
      At line 178 in file ..\SYSTEM\CPU_PORT\os_cpu_a.asm
Comment: OSTaskSwHook used once
8 symbols
359 symbols in table
